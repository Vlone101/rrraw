var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * Created by mjaric on 9/28/16.
 */
import { Injectable } from '@angular/core';
// import {BaseGoogleMapsApiLoader} from '../loaders/base-google-maps-api-loader';
import { LazyGoogleMapsApiLoader } from '../loaders/lazy-google-maps-api-loader';
var DefaultCoords = {
    latitude: 40.730610,
    longitude: -73.935242
};
var DEFAULT_MAP_OPTIONS = {
    zoom: 10,
    zoomControl: false,
    mapTypeControl: false,
    streetViewControl: false
};
function noop() {
}
/**
 * Service responsible to execute arbitrary functions in specific google map context
 */
var MapsManager = (function () {
    function MapsManager(loader) {
        this.loader = loader;
        this._maps = new Map();
        // check browser location
        this.getBrowserLocation()
            .then(noop);
        // preload map immediately
        this.loader
            .load()
            .then(noop);
    }
    MapsManager.prototype.onApiLoad = function () {
        return this
            .loader
            .load();
    };
    MapsManager.prototype.createMarker = function (options) {
        return this
            .loader
            .load()
            .then(function () { return new google.maps.Marker(options); });
    };
    MapsManager.prototype.createDirections = function (options) {
        return this.loader
            .load()
            .then(function () {
            return new google.maps.DirectionsRenderer(options);
        });
    };
    MapsManager.prototype.getDirections = function (origin, destination) {
        return this
            .loader
            .load()
            .then(function () {
            var svc = new google.maps.DirectionsService();
            return new Promise(function (resolve, reject) {
                var request = {
                    origin: new google.maps.LatLng(origin.lat || origin.latitude, origin.lng || origin.longitude),
                    destination: new google.maps.LatLng(destination.lat || destination.latitude, destination.lng || destination.longitude),
                    travelMode: google.maps.TravelMode.DRIVING
                };
                svc.route(request, function (result, status) {
                    if (status === google.maps.DirectionsStatus.OK) {
                        resolve(result);
                    }
                    else {
                        console.error({ message: 'fail to get directions', status: status, result: result });
                        reject({ status: status, result: result });
                    }
                });
            });
        });
    };
    MapsManager.prototype.createMap = function (el, options) {
        var _this = this;
        return this.loader
            .load()
            .then(function () {
            return _this.getBrowserLocation()
                .then(function (coords) {
                options = Object.assign({}, options, DEFAULT_MAP_OPTIONS, {
                    center: new google.maps.LatLng(coords.latitude, coords.longitude),
                    zoom: 8
                });
                return new google.maps.Map(el, options);
            });
        });
    };
    MapsManager.prototype.getMap = function (name) {
        var _this = this;
        return this.loader
            .load()
            .then(function () { return _this._maps.get(name); });
    };
    MapsManager.prototype.addMap = function (name, map) {
        this._maps.set(name, map);
    };
    MapsManager.prototype.removeMap = function (name) {
        return this._maps.delete(name);
    };
    MapsManager.prototype.createAutocomplete = function (input, options) {
        return this.loader.load().then(function () {
            return new google.maps.places.Autocomplete(input.nativeElement, options);
        });
    };
    MapsManager.prototype.getBrowserLocation = function () {
        if (this._browserLocationPromise) {
            return (this._browserLocationPromise);
        }
        return this._browserLocationPromise = new Promise(function (resolve) {
            if (location.protocol === 'https' && navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (success) {
                    resolve(success.coords);
                }, function (error) {
                    console.error(error);
                    if (error.code !== PositionError.PERMISSION_DENIED) {
                        console.warn("Permission is accepted but error encounter with message: " + error.message);
                    }
                    // if user didn't answer return default
                    resolve(DefaultCoords);
                });
            }
            else {
                // if browser do not support location API return default (NYC)
                resolve(DefaultCoords);
            }
        });
    };
    MapsManager.prototype.calculateMapBounds = function (markers) {
        if (markers === void 0) { markers = []; }
        return this.loader.load().then(function () {
            return new Promise(function (resolve, reject) {
                if (markers && markers.length > 1) {
                    var latLng = new google.maps.LatLng(markers[0].latitude, markers[0].longitude);
                    var bounds = new google.maps.LatLngBounds(latLng);
                    for (var i = 1; i < markers.length; i++) {
                        var marker = markers[i];
                        bounds.extend(new google.maps.LatLng(marker.latitude, marker.longitude));
                    }
                    resolve(bounds);
                    return;
                }
                reject({ error: 'There is no markers in markers array', centerTo: DefaultCoords });
                return;
            });
        });
    };
    return MapsManager;
}());
MapsManager = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [LazyGoogleMapsApiLoader])
], MapsManager);
export { MapsManager };
//# sourceMappingURL=maps-manager.js.map