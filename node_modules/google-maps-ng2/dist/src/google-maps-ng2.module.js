var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { GoogleMapPolylineDirective } from './directives/google-map-polyline';
import { GoogleMapMakerDirective } from './directives/google-map-marker';
import { GoogleMapDirectionsDirective } from './directives/google-map-directions';
import { GoogleMapComponent } from './directives/google-map';
import { LazyGoogleMapsApiLoader, LAZY_LOADER_OPTIONS } from './loaders/lazy-google-maps-api-loader';
import { NgModule, APP_INITIALIZER } from '@angular/core';
import { MapsManager } from './services/maps-manager';
/**
 * Factory function which builds handler for application initialization
 * @param loader instance of loader, should be passed as dependency
 * @returns {()=>Promise<any>} function is executed by angular application initializer
 * @constructor
 */
export function MapsApiLoaderFactory(loader) {
    return function () {
        return loader.load();
    };
}
var GoogleMapsNg2Module = GoogleMapsNg2Module_1 = (function () {
    function GoogleMapsNg2Module() {
    }
    /**
     * Used to register in top level or shared module in your application. Loader Options are mandatory.
     * {@expample
import {NgModule, NgModule} from '@angular/core';
     *
     *  @NgModule({
     *      declarations: [...],
     *      imports: [
     *          ...
     *          GoogleMapsNg2Module.forRoot(<LoaderOptions>{
     *              apiKey: "your google maps API key
     *              libraries: ["places", "geometry"]
     *          }),
     *          ...
     *     ],
     *     // optional, you can import module like below if your module depends only on component and directives
     *     exports: [
     *      GoogleMapsNg2Module
     *     ]
     *  })
     *  export class MySharedModule { }
     * }
     *
     * @param loaderOptions
     * @returns {ModuleWithProviders}
     */
    GoogleMapsNg2Module.forRoot = function (loaderOptions) {
        return {
            ngModule: GoogleMapsNg2Module_1,
            providers: [
                {
                    provide: LAZY_LOADER_OPTIONS,
                    useValue: loaderOptions
                },
                LazyGoogleMapsApiLoader,
                {
                    provide: APP_INITIALIZER,
                    useFactory: MapsApiLoaderFactory,
                    deps: [LazyGoogleMapsApiLoader],
                    multi: true
                },
                { provide: MapsManager, useClass: MapsManager }
            ]
        };
    };
    return GoogleMapsNg2Module;
}());
GoogleMapsNg2Module = GoogleMapsNg2Module_1 = __decorate([
    NgModule({
        declarations: [
            GoogleMapComponent,
            GoogleMapDirectionsDirective,
            GoogleMapMakerDirective,
            GoogleMapPolylineDirective
        ],
        exports: [
            GoogleMapComponent,
            GoogleMapDirectionsDirective,
            GoogleMapMakerDirective,
            GoogleMapPolylineDirective
        ]
    })
], GoogleMapsNg2Module);
export { GoogleMapsNg2Module };
var GoogleMapsNg2Module_1;
//# sourceMappingURL=google-maps-ng2.module.js.map