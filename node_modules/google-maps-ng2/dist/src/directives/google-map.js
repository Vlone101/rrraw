var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
/**
 * Created by mjaric on 9/28/16.
 */
import { Component, Input, forwardRef, ElementRef, QueryList, Attribute, ContentChildren } from '@angular/core';
import { MapsManager } from '../services/maps-manager';
import { BaseGoogleMapComponent } from './base-google-map-component';
var GoogleMapComponent = GoogleMapComponent_1 = (function () {
    function GoogleMapComponent(_name, _elem, _mapsManager) {
        var _this = this;
        this._name = _name;
        this._elem = _elem;
        this._mapsManager = _mapsManager;
        /**
         * Should map auto resize bounds to current set of markers
         * @type {boolean} default is true
         */
        this.autoFitMarkers = true;
        this._id = GoogleMapComponent_1.counters++;
        this._map = new Promise(function (resolve) { return _this._mapResolver = resolve; });
    }
    GoogleMapComponent.prototype.getMap = function () {
        return this._map;
    };
    Object.defineProperty(GoogleMapComponent.prototype, "backgroundColor", {
        get: function () {
            return this._backgroundColor;
        },
        /**
         * Color used for the background of the Map div.
         * This color will be visible when tiles have not yet loaded as the user pans.
         * Note: This option can only be set when the map is initialized.
         */
        set: function (value) {
            if (this._backgroundColor) {
                console.warn('Option "backgroundColor" can only be set when the map is initialized');
                return;
            }
            this._backgroundColor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "center", {
        get: function () {
            return this._center;
        },
        /**
         * The initial Map center. Required.
         */
        set: function (value) {
            this._map.then(function (map) {
                if (value) {
                    map.setCenter({
                        lat: value.lat || value.latitude,
                        lng: value.lng || value.longitude
                    });
                }
            });
            this._center = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "disableDoubleClickZoom", {
        get: function () {
            return this._disableDoubleClickZoom;
        },
        /**
         * Enables/disables zoom and center on double click. Enabled by default.
         */
        set: function (mode) {
            this._map.then(function (map) { return map.setOptions({ disableDoubleClickZoom: mode }); });
            this._disableDoubleClickZoom = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "draggable", {
        get: function () {
            return this._draggable;
        },
        /**
         * If false, prevents the map from being dragged.
         * Dragging is enabled by default.
         */
        set: function (mode) {
            this._map.then(function (map) { return map.setOptions({ draggable: mode }); });
            this._draggable = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "keyboardShortcuts", {
        get: function () {
            return this._keyboardShortcuts;
        },
        /**
         * If false, prevents the map from being controlled by the keyboard.
         * Keyboard shortcuts are enabled by default.
         */
        set: function (mode) {
            this._map.then(function (map) { return map.setOptions({ keyboardShortcuts: mode }); });
            this._keyboardShortcuts = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "scrollwheel", {
        get: function () {
            return this._scrollwheel;
        },
        /**
         * If false, disables scrollwheel zooming on the map.
         * The scrollwheel is enabled by default.
         */
        set: function (mode) {
            this._map.then(function (map) { return map.setOptions({ scrollwheel: mode }); });
            this._scrollwheel = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "zoom", {
        get: function () {
            return this._zoom;
        },
        /*
         * Zoom options
         * **********************************************************
         */
        /**
         * Map zoom level.
         */
        set: function (value) {
            this._map.then(function (map) { return map.setZoom(value); });
            this._zoom = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "minZoom", {
        get: function () {
            return this._minZoom;
        },
        /**
         * The maximum zoom level which will be displayed on the map.
         */
        set: function (value) {
            this._map.then(function (map) { return map.setOptions({ minZoom: value }); });
            this._minZoom = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "maxZoom", {
        get: function () {
            return this._maxZoom;
        },
        /**
         * The minimum zoom level which will be displayed on the map.
         */
        set: function (value) {
            this._map.then(function (map) { return map.setOptions({ maxZoom: value }); });
            this._maxZoom = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "disableDefaultUI", {
        get: function () {
            return this._disableDefaultUI;
        },
        /*
         * Control options
         * **********************************************************
         */
        /**
         * Enables/disables all default UI.
         */
        set: function (mode) {
            this._map.then(function (map) { return map.setOptions({ disableDefaultUI: mode }); });
            this._disableDefaultUI = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "mapTypeControl", {
        get: function () {
            return this._mapTypeControl;
        },
        /**
         * Enabled/Disabled state of the Map type control.
         */
        set: function (mode) {
            this._map.then(function (map) { return map.setOptions({ mapTypeControl: mode }); });
            this._mapTypeControl = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "rotateControl", {
        get: function () {
            return this._rotateControl;
        },
        /**
         * Enabled/Disabled state of the Rotate control.
         */
        set: function (mode) {
            this._map.then(function (map) { return map.setOptions({ rotateControl: mode }); });
            this._rotateControl = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "scaleControl", {
        get: function () {
            return this._scaleControl;
        },
        /**
         * Enabled/Disabled state of the Scale control.
         */
        set: function (mode) {
            this._map.then(function (map) { return map.setOptions({ scaleControl: mode }); });
            this._scaleControl = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "streetViewControl", {
        get: function () {
            return this._streetViewControl;
        },
        /**
         * Enabled/Disabled state of the Street View Pegman control.
         */
        set: function (mode) {
            this._map.then(function (map) { return map.setOptions({ streetViewControl: mode }); });
            this._streetViewControl = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapComponent.prototype, "zoomControl", {
        get: function () {
            return this._zoomControl;
        },
        /**
         * Enabled/Disabled state of the Zoom control
         */
        set: function (mode) {
            this._map.then(function (map) { return map.setOptions({ zoomControl: mode }); });
            this._zoomControl = mode;
        },
        enumerable: true,
        configurable: true
    });
    /*
     * Internal logic
     * **********************************************************
     */
    GoogleMapComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._mapsManager
            .createMap(this._elem.nativeElement.querySelector('.google-map-container'), this.getOptions())
            .then(function (map) {
            _this._mapsManager.addMap(_this.toString(), map);
            _this._mapResolver(map);
        });
    };
    GoogleMapComponent.prototype.ngOnDestroy = function () {
        this._mapsManager.removeMap(this._name);
        this._mapComponentsSubscriptions.unsubscribe();
    };
    GoogleMapComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this._mapComponentsSubscriptions = this.mapComponents.changes.subscribe(function () {
            _this.attachComponentsToMap();
        });
        this.attachComponentsToMap();
    };
    GoogleMapComponent.prototype.toString = function () {
        return this._name ? this._name : "fh.google-maps-" + this._id;
    };
    GoogleMapComponent.prototype.attachComponentsToMap = function () {
        var _this = this;
        this._map.then(function (map) {
            _this.mapComponents
                .filter(function (v) { return !v.hasMapComponent(); })
                .forEach(function (v) {
                v.setMapComponent(_this, map);
            });
        });
    };
    GoogleMapComponent.prototype.getOptions = function () {
        return {
            center: { lat: 0, lng: 0 },
            zoom: 5,
            backgroundColor: this._backgroundColor
        };
    };
    GoogleMapComponent.prototype.resetMapBounds = function (bounds) {
        this._map.then(function (map) {
            map.fitBounds(bounds);
        });
    };
    GoogleMapComponent.prototype.fitBounds = function (bounds) {
        this.resetMapBounds(bounds);
    };
    return GoogleMapComponent;
}());
GoogleMapComponent.counters = 0;
__decorate([
    ContentChildren(forwardRef(function () { return BaseGoogleMapComponent; }), {}),
    __metadata("design:type", QueryList)
], GoogleMapComponent.prototype, "mapComponents", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], GoogleMapComponent.prototype, "autoFitMarkers", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], GoogleMapComponent.prototype, "backgroundColor", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], GoogleMapComponent.prototype, "center", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapComponent.prototype, "disableDoubleClickZoom", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapComponent.prototype, "draggable", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapComponent.prototype, "keyboardShortcuts", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapComponent.prototype, "scrollwheel", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], GoogleMapComponent.prototype, "zoom", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], GoogleMapComponent.prototype, "minZoom", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], GoogleMapComponent.prototype, "maxZoom", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapComponent.prototype, "disableDefaultUI", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapComponent.prototype, "mapTypeControl", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapComponent.prototype, "rotateControl", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapComponent.prototype, "scaleControl", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapComponent.prototype, "streetViewControl", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapComponent.prototype, "zoomControl", null);
GoogleMapComponent = GoogleMapComponent_1 = __decorate([
    Component({
        selector: 'google-map',
        template: "\n        <div class=\"google-map-container\" style=\"width: inherit; height: inherit\"></div>\n        <ng-content></ng-content>\n    "
    }),
    __param(0, Attribute('name')),
    __metadata("design:paramtypes", [String, ElementRef,
        MapsManager])
], GoogleMapComponent);
export { GoogleMapComponent };
var GoogleMapComponent_1;
//# sourceMappingURL=google-map.js.map