var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * Created by mjaric on 9/28/16.
 */
import { Directive, Input, Output, EventEmitter, forwardRef } from '@angular/core';
import { MapsManager } from '../services/maps-manager';
import { BaseGoogleMapComponent } from './base-google-map-component';
var GoogleMapMakerDirective = GoogleMapMakerDirective_1 = (function (_super) {
    __extends(GoogleMapMakerDirective, _super);
    function GoogleMapMakerDirective(_mapsManager) {
        var _this = _super.call(this) || this;
        _this._mapsManager = _mapsManager;
        /*
         * Outputs events
         * **********************************************************
         */
        /**
         * This event is fired when the marker icon was clicked.
         */
        _this.click = new EventEmitter();
        /**
         * This event is fired when the marker icon was double clicked.
         */
        _this.dblclick = new EventEmitter();
        /**
         * This event is fired for a rightclick on the marker.
         */
        _this.rightclick = new EventEmitter();
        /**
         * This event is fired when the marker position property changes.
         */
        _this.position_changed = new EventEmitter();
        /**
         * This event is fired when the marker icon property changes.
         */
        _this.icon_changed = new EventEmitter();
        /**
         * This event is fired when the marker title property changes.
         */
        _this.title_changed = new EventEmitter();
        /**
         * This event is fired when the marker visible property changes.
         */
        _this.visible_changed = new EventEmitter();
        return _this;
    }
    Object.defineProperty(GoogleMapMakerDirective.prototype, "position", {
        /*
         * Inputs options
         * **********************************************************
         */
        /**
         * Marker position
         */
        set: function (value) {
            this.proxy.then(function (marker) {
                var position = new google.maps.LatLng(value.lat || value.latitude, value.lng || value.longitude);
                marker.setPosition(position);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapMakerDirective.prototype, "clickable", {
        /**
         * If true, the marker receives mouse and touch events.
         * Default value is true.
         */
        set: function (mode) {
            this.proxy.then(function (marker) { return marker.setClickable(mode); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapMakerDirective.prototype, "icon", {
        /**
         * Icon for the foreground. If a string is provided,
         * it is treated as though it were an Icon with the string as url.
         */
        set: function (value) {
            this.proxy.then(function (marker) { return marker.setIcon(value); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapMakerDirective.prototype, "opacity", {
        /**
         * The marker's opacity between 0.0 and 1.0.
         */
        set: function (value) {
            this.proxy.then(function (marker) { return marker.setOpacity(value); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapMakerDirective.prototype, "title", {
        /**
         * Rollover text
         */
        set: function (value) {
            this.proxy.then(function (marker) { return marker.setTitle(value); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapMakerDirective.prototype, "visible", {
        /**
         * If true, the marker is visible
         */
        set: function (mode) {
            this.proxy.then(function (marker) { return marker.setVisible(mode); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapMakerDirective.prototype, "zIndex", {
        /**
         * Set marker zIndex for displayed on the map
         */
        set: function (value) {
            this.proxy.then(function (marker) { return marker.setZIndex(value); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapMakerDirective.prototype, "animation", {
        set: function (value) {
            this.proxy.then(function (marker) { return marker.setAnimation(value); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapMakerDirective.prototype, "setDelay", {
        set: function (value) {
            this.delay = value;
        },
        enumerable: true,
        configurable: true
    });
    /*
     * Internal logic
     * **********************************************************
     */
    GoogleMapMakerDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._mapsManager.createMarker()
            .then(function (marker) {
            _this.bindEvents(marker);
            _this.proxyResolver(marker);
        });
    };
    GoogleMapMakerDirective.prototype.ngOnDestroy = function () {
        this.proxy.then(function (marker) {
            google.maps.event.clearInstanceListeners(marker);
            marker.setMap(null);
        });
    };
    GoogleMapMakerDirective.prototype.bindEvents = function (marker) {
        var _this = this;
        marker.addListener('click', function (e) { return _this.click.emit(e); });
        marker.addListener('dblclick', function (e) { return _this.dblclick.emit(e); });
        marker.addListener('rightclick', function (e) { return _this.rightclick.emit(e); });
        marker.addListener('position_changed', function (e) { return _this.position_changed.emit(e); });
        marker.addListener('title_changed', function (e) { return _this.title_changed.emit(e); });
        marker.addListener('icon_changed', function (e) { return _this.icon_changed.emit(e); });
        marker.addListener('visible_changed', function (e) { return _this.visible_changed.emit(e); });
    };
    return GoogleMapMakerDirective;
}(BaseGoogleMapComponent));
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], GoogleMapMakerDirective.prototype, "click", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], GoogleMapMakerDirective.prototype, "dblclick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], GoogleMapMakerDirective.prototype, "rightclick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], GoogleMapMakerDirective.prototype, "position_changed", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], GoogleMapMakerDirective.prototype, "icon_changed", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], GoogleMapMakerDirective.prototype, "title_changed", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], GoogleMapMakerDirective.prototype, "visible_changed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], GoogleMapMakerDirective.prototype, "position", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapMakerDirective.prototype, "clickable", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], GoogleMapMakerDirective.prototype, "icon", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], GoogleMapMakerDirective.prototype, "opacity", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], GoogleMapMakerDirective.prototype, "title", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], GoogleMapMakerDirective.prototype, "visible", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], GoogleMapMakerDirective.prototype, "zIndex", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], GoogleMapMakerDirective.prototype, "animation", null);
__decorate([
    Input('delay'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], GoogleMapMakerDirective.prototype, "setDelay", null);
GoogleMapMakerDirective = GoogleMapMakerDirective_1 = __decorate([
    Directive({
        selector: 'google-map-marker',
        providers: [{ provide: BaseGoogleMapComponent, useExisting: forwardRef(function () { return GoogleMapMakerDirective_1; }) }]
    }),
    __metadata("design:paramtypes", [MapsManager])
], GoogleMapMakerDirective);
export { GoogleMapMakerDirective };
var GoogleMapMakerDirective_1;
//# sourceMappingURL=google-map-marker.js.map