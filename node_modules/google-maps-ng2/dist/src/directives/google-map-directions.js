var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * Created by mjaric on 9/30/16.
 */
import { Directive, Input, Output, EventEmitter, forwardRef } from '@angular/core';
import { MapsManager } from '../services/maps-manager';
import { BaseGoogleMapComponent } from './base-google-map-component';
var GoogleMapDirectionsDirective = GoogleMapDirectionsDirective_1 = (function (_super) {
    __extends(GoogleMapDirectionsDirective, _super);
    function GoogleMapDirectionsDirective(_mapsManager) {
        var _this = _super.call(this) || this;
        _this._mapsManager = _mapsManager;
        _this._routeColor = '#ff9702';
        /**
         * This event is fired when the directions route changes.
         */
        _this.directions_changed = new EventEmitter();
        /**
         * By default, the input map is centered and zoomed to the bounding box of this set of directions.
         * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom were never set.
         * @type {boolean}
         */
        _this.preserveViewport = true;
        return _this;
    }
    Object.defineProperty(GoogleMapDirectionsDirective.prototype, "origin", {
        /**
         * Origin of directions
         * @param value can be google.maps.LatLngLiteral or Coordinates  or {latitude: number, longitude: number}
         */
        set: function (value) {
            var _this = this;
            if (this._origin !== value) {
                this._origin = value;
                if (this._destination) {
                    this._mapsManager
                        .getDirections(this._origin, this._destination)
                        .then(function (directions) {
                        _this.proxy
                            .then(function (renderer) {
                            renderer.setDirections(directions);
                        });
                    });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapDirectionsDirective.prototype, "destination", {
        /**
         * Destination of directions
         * @param value can be google.maps.LatLngLiteral or Coordinates  or {latitude: number, longitude: number}
         */
        set: function (value) {
            var _this = this;
            if (this._destination !== value) {
                this._destination = value;
                if (this._origin) {
                    this._mapsManager
                        .getDirections(this._origin, this._destination)
                        .then(function (directions) {
                        _this.proxy
                            .then(function (renderer) {
                            renderer.setDirections(directions);
                        });
                    });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapDirectionsDirective.prototype, "routeColor", {
        /**
         * Sets the color of rendered polygonal line as route in map view
         * @param value is as string e.g. '#ff9702'. Default value is '#ff9702'
         */
        set: function (value) {
            var _this = this;
            this._routeColor = value || '#ff9702';
            this.proxy.then(function (directions) {
                directions.setOptions(_this.getOptions());
            });
        },
        enumerable: true,
        configurable: true
    });
    /*
     * Internal logic
     * **********************************************************
     */
    GoogleMapDirectionsDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._mapsManager
            .createDirections()
            .then(function (directionsRenderer) {
            _this.bindEvents(directionsRenderer);
            _this.proxyResolver(directionsRenderer);
        });
    };
    GoogleMapDirectionsDirective.prototype.ngOnDestroy = function () {
        this.proxy.then(function (directions) {
            google.maps.event.clearInstanceListeners(directions);
            directions.setMap(null);
        });
    };
    GoogleMapDirectionsDirective.prototype.bindEvents = function (directions) {
        var _this = this;
        directions.addListener('directions_changed', function (e) { return _this.directions_changed.emit(e); });
    };
    GoogleMapDirectionsDirective.prototype.getOptions = function () {
        return {
            preserveViewport: this.preserveViewport,
            suppressMarkers: true,
            polylineOptions: {
                strokeColor: this._routeColor
            }
        };
    };
    return GoogleMapDirectionsDirective;
}(BaseGoogleMapComponent));
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], GoogleMapDirectionsDirective.prototype, "origin", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], GoogleMapDirectionsDirective.prototype, "destination", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], GoogleMapDirectionsDirective.prototype, "routeColor", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], GoogleMapDirectionsDirective.prototype, "directions_changed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], GoogleMapDirectionsDirective.prototype, "preserveViewport", void 0);
GoogleMapDirectionsDirective = GoogleMapDirectionsDirective_1 = __decorate([
    Directive({
        selector: 'google-map-directions',
        providers: [{ provide: BaseGoogleMapComponent, useExisting: forwardRef(function () { return GoogleMapDirectionsDirective_1; }) }]
    }),
    __metadata("design:paramtypes", [MapsManager])
], GoogleMapDirectionsDirective);
export { GoogleMapDirectionsDirective };
var GoogleMapDirectionsDirective_1;
//# sourceMappingURL=google-map-directions.js.map