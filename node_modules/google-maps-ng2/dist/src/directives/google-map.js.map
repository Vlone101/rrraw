{"version":3,"file":"google-map.js","sourceRoot":"","sources":["../../../src/directives/google-map.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Created by mjaric on 9/28/16.\r\n */\r\nimport {\r\n    Component,\r\n    Input,\r\n    OnInit,\r\n    OnDestroy,\r\n    AfterContentInit,\r\n    forwardRef,\r\n    ElementRef,\r\n    QueryList,\r\n    Attribute, ContentChildren\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\nimport { MapsManager } from '../services/maps-manager';\r\nimport { BaseGoogleMapComponent } from './base-google-map-component';\r\nimport { IOptionalSetMapMethod } from './optional-set-map-method.interface';\r\n\r\n\r\n@Component({\r\n    selector: 'google-map',\r\n    template: `\r\n        <div class=\"google-map-container\" style=\"width: inherit; height: inherit\"></div>\r\n        <ng-content></ng-content>\r\n    `\r\n})\r\nexport class GoogleMapComponent implements OnDestroy, OnInit, AfterContentInit {\r\n    public static counters = 0;\r\n\r\n    private _zoomControl: any;\r\n    private _streetViewControl: any;\r\n    private _scaleControl: any;\r\n    private _rotateControl: any;\r\n    private _mapTypeControl: any;\r\n    private _disableDefaultUI: any;\r\n    private _maxZoom: any;\r\n    private _minZoom: any;\r\n    private _zoom: any;\r\n    private _scrollwheel: any;\r\n    private _keyboardShortcuts: any;\r\n    private _draggable: boolean;\r\n\r\n    private _id: number;\r\n    private _map: Promise<google.maps.Map>;\r\n    private _mapResolver: (map: google.maps.Map) => void;\r\n    private _mapComponentsSubscriptions: Subscription;\r\n    private _backgroundColor: string;\r\n    private _center: any;\r\n    private _disableDoubleClickZoom: boolean;\r\n\r\n    @ContentChildren(forwardRef(() => BaseGoogleMapComponent), {})\r\n    public mapComponents: QueryList<BaseGoogleMapComponent<IOptionalSetMapMethod>>;\r\n\r\n    /**\r\n     * Should map auto resize bounds to current set of markers\r\n     * @type {boolean} default is true\r\n     */\r\n    @Input()\r\n    public autoFitMarkers: boolean = true;\r\n\r\n    constructor( @Attribute('name')\r\n    private _name: string,\r\n        private _elem: ElementRef,\r\n        private _mapsManager: MapsManager) {\r\n\r\n        this._id = GoogleMapComponent.counters++;\r\n        this._map = new Promise(resolve => this._mapResolver = resolve);\r\n    }\r\n\r\n    public getMap(): Promise<google.maps.Map> {\r\n        return this._map;\r\n    }\r\n\r\n    /**\r\n     * Color used for the background of the Map div.\r\n     * This color will be visible when tiles have not yet loaded as the user pans.\r\n     * Note: This option can only be set when the map is initialized.\r\n     */\r\n    @Input()\r\n    public set backgroundColor(value: string) {\r\n        if (this._backgroundColor) {\r\n            console.warn('Option \"backgroundColor\" can only be set when the map is initialized');\r\n            return;\r\n        }\r\n\r\n        this._backgroundColor = value;\r\n    }\r\n    public get backgroundColor(): string {\r\n        return this._backgroundColor;\r\n    }\r\n\r\n    /**\r\n     * The initial Map center. Required.\r\n     */\r\n    @Input()\r\n    public set center(value: google.maps.LatLngLiteral | Coordinates | { latitude: number, longitude: number }) {\r\n        this._map.then(map => {\r\n            if (value) {\r\n                map.setCenter({\r\n                    lat: (<google.maps.LatLngLiteral>value).lat || (<Coordinates>value).latitude,\r\n                    lng: (<google.maps.LatLngLiteral>value).lng || (<Coordinates>value).longitude\r\n                });\r\n            }\r\n\r\n        });\r\n        this._center = value;\r\n    }\r\n    public get center(): google.maps.LatLngLiteral | Coordinates | { latitude: number, longitude: number } {\r\n        return this._center;\r\n    }\r\n\r\n\r\n    /**\r\n     * Enables/disables zoom and center on double click. Enabled by default.\r\n     */\r\n    @Input()\r\n    public set disableDoubleClickZoom(mode: boolean) {\r\n        this._map.then(map => map.setOptions({ disableDoubleClickZoom: mode }));\r\n        this._disableDoubleClickZoom = mode;\r\n    }\r\n    public get disableDoubleClickZoom(): boolean {\r\n        return this._disableDoubleClickZoom;\r\n    }\r\n\r\n    /**\r\n     * If false, prevents the map from being dragged.\r\n     * Dragging is enabled by default.\r\n     */\r\n    @Input()\r\n    public set draggable(mode: boolean) {\r\n        this._map.then(map => map.setOptions({ draggable: mode }));\r\n        this._draggable = mode;\r\n    }\r\n    public get draggable(): boolean {\r\n        return this._draggable;\r\n    }\r\n\r\n    /**\r\n     * If false, prevents the map from being controlled by the keyboard.\r\n     * Keyboard shortcuts are enabled by default.\r\n     */\r\n    @Input()\r\n    public set keyboardShortcuts(mode: boolean) {\r\n        this._map.then(map => map.setOptions({ keyboardShortcuts: mode }));\r\n        this._keyboardShortcuts = mode;\r\n    }\r\n    public get keyboardShortcuts(): boolean {\r\n        return this._keyboardShortcuts;\r\n    }\r\n\r\n    /**\r\n     * If false, disables scrollwheel zooming on the map.\r\n     * The scrollwheel is enabled by default.\r\n     */\r\n    @Input()\r\n    public set scrollwheel(mode: boolean) {\r\n        this._map.then(map => map.setOptions({ scrollwheel: mode }));\r\n        this._scrollwheel = mode;\r\n    }\r\n    public get scrollwheel(): boolean {\r\n        return this._scrollwheel;\r\n    }\r\n\r\n    /*\r\n     * Zoom options\r\n     * **********************************************************\r\n     */\r\n\r\n    /**\r\n     * Map zoom level.\r\n     */\r\n    @Input()\r\n    public set zoom(value: number) {\r\n        this._map.then(map => map.setZoom(value));\r\n        this._zoom = value;\r\n    }\r\n    public get zoom(): number {\r\n        return this._zoom;\r\n    }\r\n\r\n    /**\r\n     * The maximum zoom level which will be displayed on the map.\r\n     */\r\n    @Input()\r\n    public set minZoom(value: number) {\r\n        this._map.then(map => map.setOptions({ minZoom: value }));\r\n        this._minZoom = value;\r\n    }\r\n    public get minZoom(): number {\r\n        return this._minZoom;\r\n    }\r\n\r\n    /**\r\n     * The minimum zoom level which will be displayed on the map.\r\n     */\r\n    @Input()\r\n    public set maxZoom(value: number) {\r\n        this._map.then(map => map.setOptions({ maxZoom: value }));\r\n        this._maxZoom = value;\r\n    }\r\n    public get maxZoom(): number {\r\n        return this._maxZoom;\r\n    }\r\n\r\n    /*\r\n     * Control options\r\n     * **********************************************************\r\n     */\r\n\r\n    /**\r\n     * Enables/disables all default UI.\r\n     */\r\n    @Input()\r\n    public set disableDefaultUI(mode: boolean) {\r\n        this._map.then(map => map.setOptions({ disableDefaultUI: mode }));\r\n        this._disableDefaultUI = mode;\r\n    }\r\n    public get disableDefaultUI(): boolean {\r\n        return this._disableDefaultUI;\r\n    }\r\n\r\n    /**\r\n     * Enabled/Disabled state of the Map type control.\r\n     */\r\n    @Input()\r\n    public set mapTypeControl(mode: boolean) {\r\n        this._map.then(map => map.setOptions({ mapTypeControl: mode }));\r\n        this._mapTypeControl = mode;\r\n    }\r\n    public get mapTypeControl(): boolean {\r\n        return this._mapTypeControl;\r\n    }\r\n\r\n    /**\r\n     * Enabled/Disabled state of the Rotate control.\r\n     */\r\n    @Input()\r\n    public set rotateControl(mode: boolean) {\r\n        this._map.then(map => map.setOptions({ rotateControl: mode }));\r\n        this._rotateControl = mode;\r\n    }\r\n    public get rotateControl(): boolean {\r\n        return this._rotateControl;\r\n    }\r\n\r\n    /**\r\n     * Enabled/Disabled state of the Scale control.\r\n     */\r\n    @Input()\r\n    public set scaleControl(mode: boolean) {\r\n        this._map.then(map => map.setOptions({ scaleControl: mode }));\r\n        this._scaleControl = mode;\r\n    }\r\n    public get scaleControl(): boolean {\r\n        return this._scaleControl;\r\n    }\r\n\r\n    /**\r\n     * Enabled/Disabled state of the Street View Pegman control.\r\n     */\r\n    @Input()\r\n    public set streetViewControl(mode: boolean) {\r\n        this._map.then(map => map.setOptions({ streetViewControl: mode }));\r\n        this._streetViewControl = mode;\r\n    }\r\n    public get streetViewControl(): boolean {\r\n        return this._streetViewControl;\r\n    }\r\n\r\n    /**\r\n     * Enabled/Disabled state of the Zoom control\r\n     */\r\n    @Input()\r\n    public set zoomControl(mode: boolean) {\r\n        this._map.then(map => map.setOptions({ zoomControl: mode }));\r\n        this._zoomControl = mode;\r\n    }\r\n    public get zoomControl(): boolean {\r\n        return this._zoomControl;\r\n    }\r\n\r\n    /*\r\n     * Internal logic\r\n     * **********************************************************\r\n     */\r\n\r\n    public ngOnInit(): void {\r\n        this._mapsManager\r\n            .createMap(\r\n            this._elem.nativeElement.querySelector('.google-map-container'),\r\n            this.getOptions())\r\n            .then(map => {\r\n                this._mapsManager.addMap(this.toString(), map);\r\n                this._mapResolver(map);\r\n            });\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this._mapsManager.removeMap(this._name);\r\n        this._mapComponentsSubscriptions.unsubscribe();\r\n    }\r\n\r\n    public ngAfterContentInit(): void {\r\n        this._mapComponentsSubscriptions = this.mapComponents.changes.subscribe(() => {\r\n            this.attachComponentsToMap();\r\n        });\r\n\r\n        this.attachComponentsToMap();\r\n\r\n    }\r\n\r\n    public toString(): string {\r\n        return this._name ? this._name : `fh.google-maps-${this._id}`;\r\n    }\r\n\r\n    private attachComponentsToMap(): void {\r\n        this._map.then(map => {\r\n            this.mapComponents\r\n                .filter(v => !v.hasMapComponent())\r\n                .forEach(v => {\r\n                    v.setMapComponent(this, map);\r\n                });\r\n        });\r\n    }\r\n\r\n    private getOptions(): google.maps.MapOptions {\r\n        return {\r\n            center: <google.maps.LatLng><any>{ lat: 0, lng: 0 },\r\n            zoom: 5,\r\n            backgroundColor: this._backgroundColor\r\n        };\r\n    }\r\n\r\n    private resetMapBounds(bounds: google.maps.LatLngBounds) {\r\n        this._map.then(map => {\r\n            map.fitBounds(bounds);\r\n        });\r\n    }\r\n\r\n    public fitBounds(bounds: google.maps.LatLngBounds) {\r\n        this.resetMapBounds(bounds);\r\n    }\r\n}\r\n\r\n\r\n"]}