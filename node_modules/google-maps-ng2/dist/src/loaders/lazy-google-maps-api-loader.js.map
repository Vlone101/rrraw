{"version":3,"file":"lazy-google-maps-api-loader.js","sourceRoot":"","sources":["../../../src/loaders/lazy-google-maps-api-loader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Created by mjaric on 9/28/16.\r\n */\r\nimport {Injectable, Inject, OpaqueToken} from '@angular/core';\r\nimport {BaseGoogleMapsApiLoader} from './base-google-maps-api-loader';\r\nimport {LoaderOptions} from \"./loader-options.interface\";\r\nimport {ScriptLoaderProtocol} from \"./script-loader-protocol\";\r\n\r\n\r\n\r\n\r\n\r\nexport const LAZY_LOADER_OPTIONS = new OpaqueToken('_gmapsng2.LazyLoaderGoogleMapsApiOptions');\r\nexport const LOADER_OPTIONS_DEFAULT: LoaderOptions = {\r\n    apiVersion: 3,\r\n    protocol: ScriptLoaderProtocol.AUTO,\r\n    hostAndPath: 'maps.googleapis.com/maps/api/js',\r\n    libraries: []\r\n};\r\n\r\n@Injectable()\r\nexport class LazyGoogleMapsApiLoader extends BaseGoogleMapsApiLoader {\r\n    private _options: LoaderOptions;\r\n    private _promise: Promise<void>;\r\n\r\n    constructor(@Inject(LAZY_LOADER_OPTIONS) options: LoaderOptions) {\r\n        super();\r\n        this._options = Object.assign({}, LOADER_OPTIONS_DEFAULT, options);\r\n    }\r\n\r\n    load(): Promise<void> {\r\n        if (this._promise) {\r\n            return this._promise;\r\n        }\r\n        return this._promise = this.createPromise();\r\n    }\r\n\r\n    private createPromise(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            const callbackName = `_gmi${new Date().getTime()}`;\r\n\r\n            (<any>window)[callbackName] = resolve;\r\n            document.body.appendChild(this.createScript(callbackName, reject));\r\n        });\r\n    }\r\n\r\n    private createScript(callbackName: string, onError: (error: Event) => void): HTMLScriptElement {\r\n        let script = document.createElement('script');\r\n\r\n        script.type = 'text/javascript';\r\n        script.src = this.createScriptUrl(callbackName);\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.onerror = onError;\r\n\r\n        return script;\r\n    }\r\n\r\n    private createScriptUrl(callbackName: string): string {\r\n        return `${this.getProtocol()}//${this._options.hostAndPath}${this.getQueryParams(callbackName)}`;\r\n    }\r\n\r\n    private getProtocol(): string {\r\n        switch (this._options.protocol) {\r\n            case ScriptLoaderProtocol.AUTO:\r\n                return '';\r\n            case ScriptLoaderProtocol.HTTP:\r\n                return 'http:';\r\n            // case ScriptLoaderProtocol.HTTPS:\r\n            default:\r\n                return 'https:';\r\n        }\r\n    }\r\n\r\n    private getQueryParams(callbackName: string): string {\r\n        const queryParams: { [k: string]: any } = {\r\n            v: this._options.apiVersion,\r\n            callback: callbackName\r\n        };\r\n\r\n        if (this._options.apiKey) {\r\n            queryParams['key'] = this._options.apiKey;\r\n        }\r\n\r\n        if (this._options.libraries && this._options.libraries.length) {\r\n            queryParams['libraries'] = this._options.libraries.join(',');\r\n        }\r\n\r\n        if (this._options.region) {\r\n            queryParams['region'] = this._options.region;\r\n        }\r\n\r\n        if (this._options.language) {\r\n            queryParams['language'] = this._options.language;\r\n        }\r\n\r\n        const params: string[] = [];\r\n\r\n        Object.keys(queryParams)\r\n            .forEach(key => {\r\n                params.push(`${key}=${queryParams[key]}`);\r\n            });\r\n\r\n        return `?${params.join('&')}`;\r\n    }\r\n}\r\n"]}