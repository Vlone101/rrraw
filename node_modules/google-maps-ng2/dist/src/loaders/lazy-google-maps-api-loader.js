var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
/**
 * Created by mjaric on 9/28/16.
 */
import { Injectable, Inject, OpaqueToken } from '@angular/core';
import { BaseGoogleMapsApiLoader } from './base-google-maps-api-loader';
import { ScriptLoaderProtocol } from "./script-loader-protocol";
export var LAZY_LOADER_OPTIONS = new OpaqueToken('_gmapsng2.LazyLoaderGoogleMapsApiOptions');
export var LOADER_OPTIONS_DEFAULT = {
    apiVersion: 3,
    protocol: ScriptLoaderProtocol.AUTO,
    hostAndPath: 'maps.googleapis.com/maps/api/js',
    libraries: []
};
var LazyGoogleMapsApiLoader = (function (_super) {
    __extends(LazyGoogleMapsApiLoader, _super);
    function LazyGoogleMapsApiLoader(options) {
        var _this = _super.call(this) || this;
        _this._options = Object.assign({}, LOADER_OPTIONS_DEFAULT, options);
        return _this;
    }
    LazyGoogleMapsApiLoader.prototype.load = function () {
        if (this._promise) {
            return this._promise;
        }
        return this._promise = this.createPromise();
    };
    LazyGoogleMapsApiLoader.prototype.createPromise = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var callbackName = "_gmi" + new Date().getTime();
            window[callbackName] = resolve;
            document.body.appendChild(_this.createScript(callbackName, reject));
        });
    };
    LazyGoogleMapsApiLoader.prototype.createScript = function (callbackName, onError) {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = this.createScriptUrl(callbackName);
        script.async = true;
        script.defer = true;
        script.onerror = onError;
        return script;
    };
    LazyGoogleMapsApiLoader.prototype.createScriptUrl = function (callbackName) {
        return this.getProtocol() + "//" + this._options.hostAndPath + this.getQueryParams(callbackName);
    };
    LazyGoogleMapsApiLoader.prototype.getProtocol = function () {
        switch (this._options.protocol) {
            case ScriptLoaderProtocol.AUTO:
                return '';
            case ScriptLoaderProtocol.HTTP:
                return 'http:';
            // case ScriptLoaderProtocol.HTTPS:
            default:
                return 'https:';
        }
    };
    LazyGoogleMapsApiLoader.prototype.getQueryParams = function (callbackName) {
        var queryParams = {
            v: this._options.apiVersion,
            callback: callbackName
        };
        if (this._options.apiKey) {
            queryParams['key'] = this._options.apiKey;
        }
        if (this._options.libraries && this._options.libraries.length) {
            queryParams['libraries'] = this._options.libraries.join(',');
        }
        if (this._options.region) {
            queryParams['region'] = this._options.region;
        }
        if (this._options.language) {
            queryParams['language'] = this._options.language;
        }
        var params = [];
        Object.keys(queryParams)
            .forEach(function (key) {
            params.push(key + "=" + queryParams[key]);
        });
        return "?" + params.join('&');
    };
    return LazyGoogleMapsApiLoader;
}(BaseGoogleMapsApiLoader));
LazyGoogleMapsApiLoader = __decorate([
    Injectable(),
    __param(0, Inject(LAZY_LOADER_OPTIONS)),
    __metadata("design:paramtypes", [Object])
], LazyGoogleMapsApiLoader);
export { LazyGoogleMapsApiLoader };
//# sourceMappingURL=lazy-google-maps-api-loader.js.map