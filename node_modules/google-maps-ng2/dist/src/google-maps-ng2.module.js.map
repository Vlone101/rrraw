{"version":3,"file":"google-maps-ng2.module.js","sourceRoot":"","sources":["../../src/google-maps-ng2.module.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,0BAA0B,EAAC,MAAM,kCAAkC,CAAC;AAC5E,OAAO,EAAC,uBAAuB,EAAC,MAAM,gCAAgC,CAAC;AACvE,OAAO,EAAC,4BAA4B,EAAC,MAAM,oCAAoC,CAAC;AAChF,OAAO,EAAC,kBAAkB,EAAC,MAAM,yBAAyB,CAAC;AAC3D,OAAO,EAAE,uBAAuB,EAAE,mBAAmB,EAAE,MAAM,uCAAuC,CAAC;AACrG,OAAO,EAAE,QAAQ,EAAuB,eAAe,EAAE,MAAM,eAAe,CAAC;AAE/E,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AAEtD;;;;;GAKG;AACH,MAAM,+BAA+B,MAA+B;IAChE,MAAM,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC,CAAC;AACN,CAAC;AAgBD,IAAa,mBAAmB;IAAhC;IA8CA,CAAC;IA7CG;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IACI,2BAAO,GAAd,UAAe,aAA4B;QACvC,MAAM,CAAC;YACH,QAAQ,EAAE,qBAAmB;YAC7B,SAAS,EAAE;gBACP;oBACI,OAAO,EAAE,mBAAmB;oBAC5B,QAAQ,EAAE,aAAa;iBAC1B;gBACD,uBAAuB;gBACrB;oBACE,OAAO,EAAE,eAAe;oBACxB,UAAU,EAAE,oBAAoB;oBAChC,IAAI,EAAE,CAAC,uBAAuB,CAAC;oBAC/B,KAAK,EAAE,IAAI;iBACd;gBACD,EAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAC;aAChD;SACJ,CAAC;IACN,CAAC;IACL,0BAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,mBAAmB;IAd/B,QAAQ,CAAC;QACN,YAAY,EAAE;YACV,kBAAkB;YAClB,4BAA4B;YAC5B,uBAAuB;YACvB,0BAA0B;SAC7B;QACD,OAAO,EAAE;YACL,kBAAkB;YAClB,4BAA4B;YAC5B,uBAAuB;YACvB,0BAA0B;SAC7B;KACJ,CAAC;GACW,mBAAmB,CA8C/B;SA9CY,mBAAmB","sourcesContent":["import {GoogleMapPolylineDirective} from './directives/google-map-polyline';\r\nimport {GoogleMapMakerDirective} from './directives/google-map-marker';\r\nimport {GoogleMapDirectionsDirective} from './directives/google-map-directions';\r\nimport {GoogleMapComponent} from './directives/google-map';\r\nimport { LazyGoogleMapsApiLoader, LAZY_LOADER_OPTIONS } from './loaders/lazy-google-maps-api-loader';\r\nimport { NgModule, ModuleWithProviders, APP_INITIALIZER } from '@angular/core';\r\nimport { LoaderOptions } from './loaders/loader-options.interface';\r\nimport { MapsManager } from './services/maps-manager';\r\n\r\n/**\r\n * Factory function which builds handler for application initialization\r\n * @param loader instance of loader, should be passed as dependency\r\n * @returns {()=>Promise<any>} function is executed by angular application initializer\r\n * @constructor\r\n */\r\nexport function MapsApiLoaderFactory(loader: LazyGoogleMapsApiLoader) {\r\n    return function (): Promise<any> {\r\n        return loader.load();\r\n    };\r\n}\r\n\r\n@NgModule({\r\n    declarations: [\r\n        GoogleMapComponent,\r\n        GoogleMapDirectionsDirective,\r\n        GoogleMapMakerDirective,\r\n        GoogleMapPolylineDirective\r\n    ],\r\n    exports: [\r\n        GoogleMapComponent,\r\n        GoogleMapDirectionsDirective,\r\n        GoogleMapMakerDirective,\r\n        GoogleMapPolylineDirective\r\n    ]\r\n})\r\nexport class GoogleMapsNg2Module {\r\n    /**\r\n     * Used to register in top level or shared module in your application. Loader Options are mandatory.\r\n     * {@expample\r\nimport {NgModule, NgModule} from '@angular/core';\r\n     *\r\n     *  @NgModule({\r\n     *      declarations: [...],\r\n     *      imports: [\r\n     *          ...\r\n     *          GoogleMapsNg2Module.forRoot(<LoaderOptions>{\r\n     *              apiKey: \"your google maps API key\r\n     *              libraries: [\"places\", \"geometry\"]\r\n     *          }),\r\n     *          ...\r\n     *     ],\r\n     *     // optional, you can import module like below if your module depends only on component and directives\r\n     *     exports: [\r\n     *      GoogleMapsNg2Module\r\n     *     ]\r\n     *  })\r\n     *  export class MySharedModule { }\r\n     * }\r\n     *\r\n     * @param loaderOptions\r\n     * @returns {ModuleWithProviders}\r\n     */\r\n    static forRoot(loaderOptions: LoaderOptions): ModuleWithProviders {\r\n        return {\r\n            ngModule: GoogleMapsNg2Module,\r\n            providers: [\r\n                {\r\n                    provide: LAZY_LOADER_OPTIONS,\r\n                    useValue: loaderOptions\r\n                },\r\n                LazyGoogleMapsApiLoader\r\n                , {\r\n                    provide: APP_INITIALIZER,\r\n                    useFactory: MapsApiLoaderFactory,\r\n                    deps: [LazyGoogleMapsApiLoader],\r\n                    multi: true\r\n                },\r\n                {provide: MapsManager, useClass: MapsManager}\r\n            ]\r\n        };\r\n    }\r\n}"]}