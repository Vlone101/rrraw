import {GoogleMapPolylineDirective} from './directives/google-map-polyline';
import {GoogleMapMakerDirective} from './directives/google-map-marker';
import {GoogleMapDirectionsDirective} from './directives/google-map-directions';
import {GoogleMapComponent} from './directives/google-map';
import { LazyGoogleMapsApiLoader, LAZY_LOADER_OPTIONS } from './loaders/lazy-google-maps-api-loader';
import { NgModule, ModuleWithProviders, APP_INITIALIZER } from '@angular/core';
import { LoaderOptions } from './loaders/loader-options.interface';
import { MapsManager } from './services/maps-manager';

/**
 * Factory function which builds handler for application initialization
 * @param loader instance of loader, should be passed as dependency
 * @returns {()=>Promise<any>} function is executed by angular application initializer
 * @constructor
 */
export function MapsApiLoaderFactory(loader: LazyGoogleMapsApiLoader) {
    return function (): Promise<any> {
        return loader.load();
    };
}

@NgModule({
    declarations: [
        GoogleMapComponent,
        GoogleMapDirectionsDirective,
        GoogleMapMakerDirective,
        GoogleMapPolylineDirective
    ],
    exports: [
        GoogleMapComponent,
        GoogleMapDirectionsDirective,
        GoogleMapMakerDirective,
        GoogleMapPolylineDirective
    ]
})
export class GoogleMapsNg2Module {
    /**
     * Used to register in top level or shared module in your application. Loader Options are mandatory.
     * {@expample
import {NgModule, NgModule} from '@angular/core';
     *
     *  @NgModule({
     *      declarations: [...],
     *      imports: [
     *          ...
     *          GoogleMapsNg2Module.forRoot(<LoaderOptions>{
     *              apiKey: "your google maps API key
     *              libraries: ["places", "geometry"]
     *          }),
     *          ...
     *     ],
     *     // optional, you can import module like below if your module depends only on component and directives
     *     exports: [
     *      GoogleMapsNg2Module
     *     ]
     *  })
     *  export class MySharedModule { }
     * }
     *
     * @param loaderOptions
     * @returns {ModuleWithProviders}
     */
    static forRoot(loaderOptions: LoaderOptions): ModuleWithProviders {
        return {
            ngModule: GoogleMapsNg2Module,
            providers: [
                {
                    provide: LAZY_LOADER_OPTIONS,
                    useValue: loaderOptions
                },
                LazyGoogleMapsApiLoader
                , {
                    provide: APP_INITIALIZER,
                    useFactory: MapsApiLoaderFactory,
                    deps: [LazyGoogleMapsApiLoader],
                    multi: true
                },
                {provide: MapsManager, useClass: MapsManager}
            ]
        };
    }
}