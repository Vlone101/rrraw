/**
 * Created by mjaric on 9/28/16.
 */
import {
    Component,
    Input,
    OnInit,
    OnDestroy,
    AfterContentInit,
    forwardRef,
    ElementRef,
    QueryList,
    Attribute, ContentChildren
} from '@angular/core';
import { Subscription } from 'rxjs/Subscription';

import { MapsManager } from '../services/maps-manager';
import { BaseGoogleMapComponent } from './base-google-map-component';
import { IOptionalSetMapMethod } from './optional-set-map-method.interface';


@Component({
    selector: 'google-map',
    template: `
        <div class="google-map-container" style="width: inherit; height: inherit"></div>
        <ng-content></ng-content>
    `
})
export class GoogleMapComponent implements OnDestroy, OnInit, AfterContentInit {
    public static counters = 0;

    private _zoomControl: any;
    private _streetViewControl: any;
    private _scaleControl: any;
    private _rotateControl: any;
    private _mapTypeControl: any;
    private _disableDefaultUI: any;
    private _maxZoom: any;
    private _minZoom: any;
    private _zoom: any;
    private _scrollwheel: any;
    private _keyboardShortcuts: any;
    private _draggable: boolean;

    private _id: number;
    private _map: Promise<google.maps.Map>;
    private _mapResolver: (map: google.maps.Map) => void;
    private _mapComponentsSubscriptions: Subscription;
    private _backgroundColor: string;
    private _center: any;
    private _disableDoubleClickZoom: boolean;

    @ContentChildren(forwardRef(() => BaseGoogleMapComponent), {})
    public mapComponents: QueryList<BaseGoogleMapComponent<IOptionalSetMapMethod>>;

    /**
     * Should map auto resize bounds to current set of markers
     * @type {boolean} default is true
     */
    @Input()
    public autoFitMarkers: boolean = true;

    constructor( @Attribute('name')
    private _name: string,
        private _elem: ElementRef,
        private _mapsManager: MapsManager) {

        this._id = GoogleMapComponent.counters++;
        this._map = new Promise(resolve => this._mapResolver = resolve);
    }

    public getMap(): Promise<google.maps.Map> {
        return this._map;
    }

    /**
     * Color used for the background of the Map div.
     * This color will be visible when tiles have not yet loaded as the user pans.
     * Note: This option can only be set when the map is initialized.
     */
    @Input()
    public set backgroundColor(value: string) {
        if (this._backgroundColor) {
            console.warn('Option "backgroundColor" can only be set when the map is initialized');
            return;
        }

        this._backgroundColor = value;
    }
    public get backgroundColor(): string {
        return this._backgroundColor;
    }

    /**
     * The initial Map center. Required.
     */
    @Input()
    public set center(value: google.maps.LatLngLiteral | Coordinates | { latitude: number, longitude: number }) {
        this._map.then(map => {
            if (value) {
                map.setCenter({
                    lat: (<google.maps.LatLngLiteral>value).lat || (<Coordinates>value).latitude,
                    lng: (<google.maps.LatLngLiteral>value).lng || (<Coordinates>value).longitude
                });
            }

        });
        this._center = value;
    }
    public get center(): google.maps.LatLngLiteral | Coordinates | { latitude: number, longitude: number } {
        return this._center;
    }


    /**
     * Enables/disables zoom and center on double click. Enabled by default.
     */
    @Input()
    public set disableDoubleClickZoom(mode: boolean) {
        this._map.then(map => map.setOptions({ disableDoubleClickZoom: mode }));
        this._disableDoubleClickZoom = mode;
    }
    public get disableDoubleClickZoom(): boolean {
        return this._disableDoubleClickZoom;
    }

    /**
     * If false, prevents the map from being dragged.
     * Dragging is enabled by default.
     */
    @Input()
    public set draggable(mode: boolean) {
        this._map.then(map => map.setOptions({ draggable: mode }));
        this._draggable = mode;
    }
    public get draggable(): boolean {
        return this._draggable;
    }

    /**
     * If false, prevents the map from being controlled by the keyboard.
     * Keyboard shortcuts are enabled by default.
     */
    @Input()
    public set keyboardShortcuts(mode: boolean) {
        this._map.then(map => map.setOptions({ keyboardShortcuts: mode }));
        this._keyboardShortcuts = mode;
    }
    public get keyboardShortcuts(): boolean {
        return this._keyboardShortcuts;
    }

    /**
     * If false, disables scrollwheel zooming on the map.
     * The scrollwheel is enabled by default.
     */
    @Input()
    public set scrollwheel(mode: boolean) {
        this._map.then(map => map.setOptions({ scrollwheel: mode }));
        this._scrollwheel = mode;
    }
    public get scrollwheel(): boolean {
        return this._scrollwheel;
    }

    /*
     * Zoom options
     * **********************************************************
     */

    /**
     * Map zoom level.
     */
    @Input()
    public set zoom(value: number) {
        this._map.then(map => map.setZoom(value));
        this._zoom = value;
    }
    public get zoom(): number {
        return this._zoom;
    }

    /**
     * The maximum zoom level which will be displayed on the map.
     */
    @Input()
    public set minZoom(value: number) {
        this._map.then(map => map.setOptions({ minZoom: value }));
        this._minZoom = value;
    }
    public get minZoom(): number {
        return this._minZoom;
    }

    /**
     * The minimum zoom level which will be displayed on the map.
     */
    @Input()
    public set maxZoom(value: number) {
        this._map.then(map => map.setOptions({ maxZoom: value }));
        this._maxZoom = value;
    }
    public get maxZoom(): number {
        return this._maxZoom;
    }

    /*
     * Control options
     * **********************************************************
     */

    /**
     * Enables/disables all default UI.
     */
    @Input()
    public set disableDefaultUI(mode: boolean) {
        this._map.then(map => map.setOptions({ disableDefaultUI: mode }));
        this._disableDefaultUI = mode;
    }
    public get disableDefaultUI(): boolean {
        return this._disableDefaultUI;
    }

    /**
     * Enabled/Disabled state of the Map type control.
     */
    @Input()
    public set mapTypeControl(mode: boolean) {
        this._map.then(map => map.setOptions({ mapTypeControl: mode }));
        this._mapTypeControl = mode;
    }
    public get mapTypeControl(): boolean {
        return this._mapTypeControl;
    }

    /**
     * Enabled/Disabled state of the Rotate control.
     */
    @Input()
    public set rotateControl(mode: boolean) {
        this._map.then(map => map.setOptions({ rotateControl: mode }));
        this._rotateControl = mode;
    }
    public get rotateControl(): boolean {
        return this._rotateControl;
    }

    /**
     * Enabled/Disabled state of the Scale control.
     */
    @Input()
    public set scaleControl(mode: boolean) {
        this._map.then(map => map.setOptions({ scaleControl: mode }));
        this._scaleControl = mode;
    }
    public get scaleControl(): boolean {
        return this._scaleControl;
    }

    /**
     * Enabled/Disabled state of the Street View Pegman control.
     */
    @Input()
    public set streetViewControl(mode: boolean) {
        this._map.then(map => map.setOptions({ streetViewControl: mode }));
        this._streetViewControl = mode;
    }
    public get streetViewControl(): boolean {
        return this._streetViewControl;
    }

    /**
     * Enabled/Disabled state of the Zoom control
     */
    @Input()
    public set zoomControl(mode: boolean) {
        this._map.then(map => map.setOptions({ zoomControl: mode }));
        this._zoomControl = mode;
    }
    public get zoomControl(): boolean {
        return this._zoomControl;
    }

    /*
     * Internal logic
     * **********************************************************
     */

    public ngOnInit(): void {
        this._mapsManager
            .createMap(
            this._elem.nativeElement.querySelector('.google-map-container'),
            this.getOptions())
            .then(map => {
                this._mapsManager.addMap(this.toString(), map);
                this._mapResolver(map);
            });
    }

    public ngOnDestroy(): void {
        this._mapsManager.removeMap(this._name);
        this._mapComponentsSubscriptions.unsubscribe();
    }

    public ngAfterContentInit(): void {
        this._mapComponentsSubscriptions = this.mapComponents.changes.subscribe(() => {
            this.attachComponentsToMap();
        });

        this.attachComponentsToMap();

    }

    public toString(): string {
        return this._name ? this._name : `fh.google-maps-${this._id}`;
    }

    private attachComponentsToMap(): void {
        this._map.then(map => {
            this.mapComponents
                .filter(v => !v.hasMapComponent())
                .forEach(v => {
                    v.setMapComponent(this, map);
                });
        });
    }

    private getOptions(): google.maps.MapOptions {
        return {
            center: <google.maps.LatLng><any>{ lat: 0, lng: 0 },
            zoom: 5,
            backgroundColor: this._backgroundColor
        };
    }

    private resetMapBounds(bounds: google.maps.LatLngBounds) {
        this._map.then(map => {
            map.fitBounds(bounds);
        });
    }

    public fitBounds(bounds: google.maps.LatLngBounds) {
        this.resetMapBounds(bounds);
    }
}


